---
title: "3 Attribute data operations"
format: html
editor: visual
---

# **3 Attribute data operations**

```{r}
library(sf)      # vector data package introduced in Chapter 2
library(terra)   # raster data package introduced in Chapter 2
library(dplyr)   # tidyverse package for data frame manipulation
library(spData)  # spatial data package introduced in Chapter 2
library(tidyr)   # run data ‘tidying’ operations
```

Attribute data is non-spatial information associated with geographic (geometry) data.

#### Example:

Geographic (geometry) data contains:

1.  non-spatial information

    -   name of a location: Abuja City Gate

2.  spatial data (POINT (-0.098 51.495) in the sfc representation):

    -   Latitude: 51.495

    -   Longitude: -0.098

## **3.2** Vector attribute manipulation

Geographic vector datasets are well supported in R. That is, sf objects:

-   have one column per attribute variable (such as ‘name’) and one row per observation or *feature* (e.g., per bus station)

-   have a `geometry` column of class `sfc` which can contain a range of geographic entities (single and ‘multi’ point, line, and polygon features) per row

```{r}
methods(class = "sf") # methods for sf objects, first 12 shown
```

The geometry column of `sf` objects is typically called `geometry` or `geom` but any name can be used. The following command, for example, creates a geometry column named g:

```{r}
world
st_sf(data.frame(n = world$name_long), g = world$geom)
# breakdown nested function statement
?st_sf
world$name_long
world$geom

df <- data.frame(n = world$name_long,population = world$pop)
class(df)
dim(df)

df <- st_sf(df, g = world$geom)
class(df)

g = world$geom
g

st_sf(data.frame(n = world$name_long), g = world$geom)


```

-   can also extend the tidyverse classes for data frames, `tbl_df` and `tbl (i.e.`**sf** enables the full power of R’s data analysis capabilities`)`

### Exploring the world dataset from spData package

`world` contains ten non-geographic columns (and one geometry list column) with almost 200 rows representing the world’s countries.

```{r}
class(world) # it's an sf object and a (tidy) data frame

dim(world)   # it is a 2 dimensional object, with 177 rows and 11 columns

```

The function [`st_drop_geometry()`](https://r-spatial.github.io/sf/reference/st_geometry.html) keeps only the attributes data of an `sf` object, in other words removing its geometry:

```{r}
world_df = st_drop_geometry(world)
class(world_df)

ncol(world_df)

```

### **3.2.1 Vector attribute subsetting**

This is similar to a refresher for subsetting data frame using the base R function and the dplyr package. **The ONLY thing you have to remember is the sticky situation i.e. the geom column always comes with the dataset.**

**Example 1:**

The examples below demonstrate subsetting with base R. Base R functions are mature, stable and widely used, making them a rock solid choice, especially in contexts where reproducibility and reliability are key. 

```{r}
world[1:6, ]    # subset rows by position
world[, 1:3]    # subset columns by position
world[1:6, 1:3] # subset rows and columns by position
world[, c("name_long", "pop")] # columns by name
world[, c(T, T, F, F, F, F, F, T, T, F, F)] # by logical indices
#world[, 888] # an index representing a non-existent column
```

A demonstration of the utility of using `logical` vectors for subsetting is shown in the code chunk below. This creates a new object, `small_countries`, containing nations whose surface area is smaller than 10,000 km^2^.

```{r}
i_small = world$area_km2 < 10000
summary(i_small) # a logical vector

small_countries = world[i_small, ]
small_countries
```

A more concise command, which omits the intermediary object, generates the same result:

```{r}
small_countries = world[world$area_km2 < 10000, ]
small_countries
```

**Example 2:**

**dplyr** functions enable ‘tidy’ workflows which are found intuitive and productive for interactive data analysis.

[`select()`](https://dplyr.tidyverse.org/reference/select.html) selects columns by name or position. For example, you could select only two columns, `name_long` and `pop`, with the following command:

```{r}
world1 = select(world, name_long, pop)

names(world1)

world1
```

Note: as with the equivalent command in base R (`world[, c("name_long", "pop")]`), the sticky `geom` column remains. [`select()`](https://dplyr.tidyverse.org/reference/select.html) also allows selecting a range of columns with the help of the `:` operator:

```{r}
# all columns between name_long and pop (inclusive)
world2 = select(world, name_long:pop)

names(world2)
world2
```

remove specific columns with the `-` operator:

```{r}
# all columns except subregion and area_km2 (inclusive)
world3 = select(world, -subregion, -area_km2)
```

Subset and rename columns at the same time with the `new_name = old_name` syntax:

```{r}
world4 = select(world, name_long, population = pop)
world4
```

Most **dplyr** verbs return a data frame, but you can extract a single column as a vector with [`pull()`](https://dplyr.tidyverse.org/reference/pull.html)

```{r}
pull(world, pop)
world$pop
world[["pop"]]
```

[`slice()`](https://dplyr.tidyverse.org/reference/slice.html) is the row-equivalent of [`select()`](https://dplyr.tidyverse.org/reference/select.html). The following code chunk, for example, selects rows 1 to 6:

```{r}
slice(world, 10:16)
```

[`filter()`](https://dplyr.tidyverse.org/reference/filter.html) is **dplyr**’s equivalent of base R’s [`subset()`](https://rspatial.github.io/terra/reference/subset.html) function.

```{r}
world7 = filter(world, area_km2 < 10000)  # countries with a small area
world7
world7 = filter(world, lifeExp > 82)      # with high life expectancy
```

### **3.2.2 Chaining commands with pipes**

```{r}
world7 = world |>
  filter(continent == "Asia") |>
  select(name_long, continent) |>
  slice(1:5)

world7
```

An alternative to piped operations is nested function calls, which are harder to read:

```{r}
world8 = slice(
  select(
    filter(world, continent == "Asia"),
    name_long, continent),
  1:5)

world8
```

Another alternative is to split the operations into multiple self-contained lines

```{r}
world9_filtered = filter(world, continent == "Asia")
world9_selected = select(world9_filtered, continent)
world9 = slice(world9_selected, 1:5)
```

### **3.2.3 Vector attribute aggregation**

Aggregation involves summarizing data with one or more ‘grouping variables’, typically from columns in the data frame to be aggregated

```{r}
world_agg1 = aggregate(pop ~ continent, FUN = sum, data = world,
                       na.rm = TRUE)
world_agg1
class(world_agg1)

```

The result is a non-spatial data frame with six rows, one per continent, and two columns reporting the name and population of each continent 

[`aggregate()`](https://rspatial.github.io/terra/reference/aggregate.html) is a [generic function](https://adv-r.hadley.nz/s3.html#s3-methods) which means that it behaves differently depending on its inputs. **sf** provides the method `aggregate.sf()` which is activated automatically when `x` is an `sf` object and a `by` argument is provided:

```{r}
world_agg2 = aggregate(world["pop"], by = list(world$continent), FUN = sum, 
                       na.rm = TRUE)
class(world_agg2)

nrow(world_agg2)

world_agg2 

```

The resulting `world_agg2` object is a spatial object containing 8 features representing the continents of the world (and the open ocean).

`group_by() |> summarize()` is the **dplyr** equivalent of [`aggregate()`](https://rspatial.github.io/terra/reference/aggregate.html), with the variable name provided in the [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html) function specifying the grouping variable and information on what is to be summarized passed to the [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.html) function, as shown below:

```{r}
world_agg3 = world |>
  group_by(continent) |>
  summarize(pop = sum(pop, na.rm = TRUE))

world_agg3
```

The approach may seem more complex but it has benefits: flexibility, readability, and control over the new column names. 

```{r}
world_agg4  = world |> 
  group_by(continent) |> 
  summarize(Pop = sum(pop, na.rm = TRUE), Area = sum(area_km2), N = n())

world_agg4
```

Let’s combine what we have learned so far about **dplyr** functions, by chaining multiple commands to summarize attribute data about countries worldwide by continent. 

```{r}
world_agg5 = world |> 
  st_drop_geometry() |>                      # drop the geometry for speed
  select(pop, continent, area_km2) |> # subset the columns of interest  
  group_by(continent) |>                     # group by continent and summarize:
  summarize(Pop = sum(pop, na.rm = TRUE), Area = sum(area_km2), N = n()) |>
  mutate(Density = round(Pop / Area)) |>     # calculate population density
  slice_max(Pop, n = 3) |>                   # keep only the top 3
  arrange(desc(N))  

# arrange in order of n. countries

world_agg5
```

### **3.2.4 Vector attribute joining**

**dplyr** join functions work the same on data frames and `sf` objects, the only important difference being the `geometry` list column. The result of data joins can be either an `sf` or `data.frame` object. The most common type of attribute join on spatial data takes an `sf` object as the first argument and adds columns to it from a `data.frame` specified as the second argument.

To demonstrate joins, we will combine data on coffee production with the `world` dataset. The coffee data is in a data frame called `coffee_data` from the **spData** package

```{r}
coffee_data

class(coffee_data)

world_coffee = left_join(world, coffee_data)
#> Joining with `by = join_by(name_long)`
 
world_coffee

class(world_coffee)

```

Because the input datasets share a ‘key variable’ (`name_long`) the join worked without using the `by` argument (see [`?left_join`](https://dplyr.tidyverse.org/reference/mutate-joins.html) for details). The result is an `sf` object identical to the original `world` object but with two new variables (with column indices 11 and 12) on coffee production.

```{r}
names(world_coffee)

plot(world_coffee["coffee_production_2017"])
```

In the majority of cases where variable names are not the same, you have two options:

1.  Rename the key variable in one of the objects so they match.

2.  Use the `by` argument to specify the joining variables.

The latter approach is demonstrated below on a renamed version of `coffee_data`.

```{r}
coffee_renamed = rename(coffee_data, nm = name_long)
world_coffee2 = left_join(world, coffee_renamed, by = join_by(name_long == nm))

world_coffee2
```

Note that the name in the original object is kept, meaning that `world_coffee` and the new object `world_coffee2` are identical. Another feature of the result is that it has the same number of rows as the original dataset. Although there are only 47 rows of data in `coffee_data`, all 177 country records are kept intact in `world_coffee` and `world_coffee2`: rows in the original dataset with no match are assigned `NA` values for the new coffee production variables. What if we only want to keep countries that have a match in the key variable? In that case an inner join can be used.

```{r}
world_coffee_inner = inner_join(world, coffee_data)
#> Joining with `by = join_by(name_long)`
nrow(world_coffee_inner)

```

Note that the result of [`inner_join()`](https://dplyr.tidyverse.org/reference/mutate-joins.html) has only 45 rows compared with 47 in `coffee_data`. What happened to the remaining rows? We can identify the rows that did not match using the [`setdiff()`](https://generics.r-lib.org/reference/setops.html) function as follows:

```{r}
setdiff(coffee_data$name_long, world$name_long)

```

The result shows that `Others` accounts for one row not present in the `world` dataset and that the name of the `Democratic Republic of the Congo` accounts for the other: it has been abbreviated, causing the join to miss it. The following command uses a string matching (*regex*) function from the **stringr** package to confirm what `Congo, Dem. Rep. of` should be.

```{r}
?str_sub

drc = stringr::str_subset(world$name_long, "Dem*.+Congo")
drc
#> [1] "Democratic Republic of the Congo"
```

To fix this issue, we will create a new version of `coffee_data` and update the name. 

```{r}
coffee_data$name_long[grepl("Congo,", coffee_data$name_long)] = drc
coffee_data

world_coffee_match = inner_join(world, coffee_data)
#> Joining with `by = join_by(name_long)`
nrow(world_coffee_match)
#> [1] 46
```
